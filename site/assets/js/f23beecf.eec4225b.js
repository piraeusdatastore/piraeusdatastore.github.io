"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[420],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,k=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(k,i(i({ref:t},p),{},{components:n})):r.createElement(k,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4067:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},i="Security",l={unversionedId:"security",id:"security",title:"Security",description:"This document describes the different options for enabling various security features available when",source:"@site/docs/05.security.md",sourceDirName:".",slug:"/security",permalink:"/site/docs/security",draft:!1,editUrl:"https://github.com/piraeusdatastore/docs/05.security.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Using LINSTOR's Kubernetes Backend",permalink:"/site/docs/k8s-backend"},next:{title:"Optional components",permalink:"/site/docs/optional-components"}},s={},c=[{value:"Secure communication with an existing etcd instance",id:"secure-communication-with-an-existing-etcd-instance",level:2},{value:"Authentication with <code>etcd</code> using certificates",id:"authentication-with-etcd-using-certificates",level:3},{value:"Configuring secure communication between LINSTOR components",id:"configuring-secure-communication-between-linstor-components",level:2},{value:"Configuring secure communications for the LINSTOR API",id:"configuring-secure-communications-for-the-linstor-api",level:2},{value:"Configuring secure communications for collecting metrics",id:"configuring-secure-communications-for-collecting-metrics",level:2},{value:"Automatically set the passphrase for LINSTOR",id:"automatically-set-the-passphrase-for-linstor",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"security"},"Security"),(0,a.kt)("p",null,"This document describes the different options for enabling various security features available when\nusing this operator. The following guides assume the operator is installed using helm."),(0,a.kt)("h2",{id:"secure-communication-with-an-existing-etcd-instance"},"Secure communication with an existing etcd instance"),(0,a.kt)("p",null,"Secure communication to an ",(0,a.kt)("inlineCode",{parentName:"p"},"etcd")," instance can be enabled by providing a CA certificate to the operator in form of a\nkubernetes secret. The secret has to contain the key ",(0,a.kt)("inlineCode",{parentName:"p"},"ca.crt")," with the PEM encoded CA certificate as value."),(0,a.kt)("p",null,"The secret can then be passed to the controller by passing the following argument to ",(0,a.kt)("inlineCode",{parentName:"p"},"helm install")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"--set operator.controller.dbCertSecret=<secret name>\n")),(0,a.kt)("h3",{id:"authentication-with-etcd-using-certificates"},"Authentication with ",(0,a.kt)("inlineCode",{parentName:"h3"},"etcd")," using certificates"),(0,a.kt)("p",null,"If you want to use TLS certificates to authenticate with an ",(0,a.kt)("inlineCode",{parentName:"p"},"etcd")," database, you need to set the following option on\nhelm install:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"--set operator.controller.dbUseClientCert=true\n")),(0,a.kt)("p",null,"If this option is active, the secret specified in the above section must contain two additional keys:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tls.crt")," certificate presented to ",(0,a.kt)("inlineCode",{parentName:"li"},"etcd")," for authentication"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tls.key")," private key, matching the above client certificate.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NOTE"),"\nCurrently for the ",(0,a.kt)("inlineCode",{parentName:"p"},"tls.key")," private key, used to connect to etcd, only the pkcs8 format is supported.\nYou can convert a PEM formatted key with openssl like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"openssl pkcs8 -topk8 -inform PEM -in key.pem -out tls.key -nocrypt\n")),(0,a.kt)("h2",{id:"configuring-secure-communication-between-linstor-components"},"Configuring secure communication between LINSTOR components"),(0,a.kt)("p",null,"The default communication between LINSTOR components is not secured by TLS. If this is needed for your setup,\nchoose one of three methods:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Generate certificates using cert-manager")),(0,a.kt)("p",null,"Requires ",(0,a.kt)("a",{parentName:"p",href:"https://cert-manager.io/docs/"},"cert-manager"),") installed in your cluster"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Pass the following option to ",(0,a.kt)("inlineCode",{parentName:"li"},"helm install"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"--set linstorSslMethod=cert-manager\n")),(0,a.kt)("p",null,"All required certificates will be issued automatically using cert-manager custom resources."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Generate certificates using Helm")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Pass the following option to ",(0,a.kt)("inlineCode",{parentName:"li"},"helm install"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"--set linstorSslMethod=helm\n")),(0,a.kt)("p",null,"All required certificates will be generated automatically using Helm during initial installation."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Generate and import certificates manually")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Create private key and self-signed certificate for your certificate authority:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},'openssl req -new -newkey rsa:2048 -days 5000 -nodes -x509 -keyout ca.key -out ca.crt -subj "/CN=piraeus-system"\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Create private keys, one for the controller, one for all nodes:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"openssl genrsa -out control.key 2048\nopenssl genrsa -out node.key 2048\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Create trusted certificates for controller and nodes:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},'openssl req -new -sha256 -key control.key -subj "/CN=system:control" -out control.csr\nopenssl req -new -sha256 -key node.key -subj "/CN=system:node" -out node.csr\nopenssl x509 -req -in control.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out control.crt -days 5000 -sha256\nopenssl x509 -req -in node.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out node.crt -days 5000 -sha256\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Create kubernetes secrets that can be passed to the controller and node pods:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"kubectl create secret generic control-secret --type=kubernetes.io/tls --from-file=ca.crt=ca.crt --from-file=tls.crt=control.crt --from-file=tls.key=control.key\nkubectl create secret generic node-secret --type=kubernetes.io/tls --from-file=ca.crt=ca.crt --from-file=tls.crt=node.crt --from-file=tls.key=node.key\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Pass the names of the created secrets to ",(0,a.kt)("inlineCode",{parentName:"p"},"helm install"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"--set operator.satelliteSet.sslSecret=node-secret --set operator.controller.sslSecret=control-secret\n")))),(0,a.kt)("h2",{id:"configuring-secure-communications-for-the-linstor-api"},"Configuring secure communications for the LINSTOR API"),(0,a.kt)("p",null,"Various components need to talk to the LINSTOR controller via its REST interface. This interface can be\nsecured via HTTPS, which automatically includes authentication. For HTTPS+authentication to work, each component\nneeds access to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A private key"),(0,a.kt)("li",{parentName:"ul"},"A certificate based on the key"),(0,a.kt)("li",{parentName:"ul"},"A trusted certificate, used to verify that other components are trustworthy")),(0,a.kt)("p",null,"Choose one of three methods:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Generate certificates using cert-manager")),(0,a.kt)("p",null,"Requires ",(0,a.kt)("a",{parentName:"p",href:"https://cert-manager.io/docs/"},"cert-manager"),") installed in your cluster"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Pass the following option to ",(0,a.kt)("inlineCode",{parentName:"li"},"helm install"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"--set linstorHttpsMethod=cert-manager\n")),(0,a.kt)("p",null,"All required certificates will be issued automatically using cert-manager custom resources."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Generate certificates using Helm")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Pass the following option to ",(0,a.kt)("inlineCode",{parentName:"li"},"helm install"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"--set linstorHttpsMethod=helm\n")),(0,a.kt)("p",null,"All required certificates will be issued automatically using Helm during initial installation."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Generate and import certificates manually")),(0,a.kt)("p",null,"The next sections will guide you through creating all required components."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Create private key and self-signed certificate for your client certificate authority:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},'openssl req -new -newkey rsa:2048 -days 5000 -nodes -x509 -keyout client-ca.key -out client-ca.crt -subj "/CN=piraeus-client-ca"\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Create private keys, one for the controller, one for clients:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"openssl genrsa -out controller.key 2048\nopenssl genrsa -out client.key 2048\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Create trusted certificates for controller and clients:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"openssl req -new -sha256 -key controller.key -subj \"/CN=piraeus-controller\" -out controller.csr\nopenssl req -new -sha256 -key client.key -subj \"/CN=piraeus-client\" -out client.csr\nopenssl x509 -req -in controller.csr -CA client-ca.crt -CAkey client-ca.key -CAcreateserial -out controller.crt -days 5000 -sha256 -extensions 'v3_req' -extfile <(printf '%s\\n' '[v3_req]' extendedKeyUsage=serverAuth subjectAltName=DNS:piraeus-op-cs.default.svc)\nopenssl x509 -req -in client.csr -CA client-ca.crt -CAkey client-ca.key -CAcreateserial -out client.crt -days 5000 -sha256\n")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"NOTE"),": The alias specified for the controller key (i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"DNS:piraeus-op-cs.default.svc"),") has to exactly match the\nservice name created by the operator. When using ",(0,a.kt)("inlineCode",{parentName:"p"},"helm"),", this is always of the form ",(0,a.kt)("inlineCode",{parentName:"p"},"<release-name>-cs.<release-namespace>.svc"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Now you can create secrets for the controller and for clients:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"kubectl create secret generic http-controller --type=kubernetes.io/tls --from-file=ca.crt=client-ca.crt --from-file=tls.crt=controller.crt --from-file=tls.key=controller.key\nkubectl create secret generic http-client --type=kubernetes.io/tls --from-file=ca.crt=client-ca.crt --from-file=tls.crt=client.crt --from-file=tls.key=client.key\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The names of the secrets can be passed to ",(0,a.kt)("inlineCode",{parentName:"p"},"helm install")," to configure all clients to use https."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"--set linstorHttpsControllerSecret=http-controller  --set linstorHttpsClientSecret=http-client\n")))),(0,a.kt)("h2",{id:"configuring-secure-communications-for-collecting-metrics"},"Configuring secure communications for collecting metrics"),(0,a.kt)("p",null,"The metrics collection can be secured using ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/brancz/kube-rbac-proxy"},"kube-rbac-proxy")," sidecar container."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Take a look at this example chart configuration and additional resources.\nwhich must be configured in the cluster to make rbac-proxy working in your configuration.")),(0,a.kt)("h2",{id:"automatically-set-the-passphrase-for-linstor"},"Automatically set the passphrase for LINSTOR"),(0,a.kt)("p",null,"LINSTOR may need to store sensitive information in its database, for example for encrypted volumes using the LUKS layer,\nor when storing credentials for backup locations. To protect this information, LINSTOR will encrypt it using a master\npassphrase before storing. When using Piraeus, this master passphrase is automatically created by helm and stored in a\nKubernetes secret."),(0,a.kt)("p",null,"If you want to manually set the passphrase, use:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl create secret generic linstor-pass --from-literal=MASTER_PASSPHRASE=<password>\n")),(0,a.kt)("p",null,"On install, add the following arguments to the helm command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"--set operator.controller.luksSecret=linstor-pass\n")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"\u26a0\ufe0f WARNING"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"If you ever delete or change the passphrase secret, the LINSTOR Controller can no longer start with a failure message like ",(0,a.kt)("inlineCode",{parentName:"td"},"Automatic injection of passphrase failed"),". You can force the Controller to start by setting the ",(0,a.kt)("inlineCode",{parentName:"td"},"luksSecret")," value in the ",(0,a.kt)("inlineCode",{parentName:"td"},"LinstorController")," resource to ",(0,a.kt)("inlineCode",{parentName:"td"},'""'),". This will ",(0,a.kt)("em",{parentName:"td"},"not")," give you access to encrypted items such as remotes, but it will allow the Controller to start. If you need to recover encrypted values, you need to restore the original secret.")))))}u.isMDXComponent=!0}}]);