"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[99],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=s(n),m=a,h=c["".concat(p,".").concat(m)]||c[m]||d[m]||i;return n?o.createElement(h,l(l({ref:t},u),{},{components:n})):o.createElement(h,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=c;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var s=2;s<i;s++)l[s]=n[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1133:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>s});var o=n(7462),a=(n(7294),n(3905));const i={},l="Configuring Storage",r={unversionedId:"storage",id:"storage",title:"Configuring Storage",description:"The piraeus operator can automate some basic storage set up for LINSTOR.",source:"@site/docs/02.storage.md",sourceDirName:".",slug:"/storage",permalink:"/docs/storage",draft:!1,editUrl:"https://github.com/piraeusdatastore/docs/02.storage.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Preparing the host for DRBD",permalink:"/docs/host-setup"},next:{title:"Distributions",permalink:"/docs/distributions"}},p={},s=[{value:"Configuring storage pool creation",id:"configuring-storage-pool-creation",level:2},{value:"At install time",id:"at-install-time",level:3},{value:"After install",id:"after-install",level:3},{value:"Preparing physical devices",id:"preparing-physical-devices",level:2},{value:"<code>lvmPools</code> configuration",id:"lvmpools-configuration",level:4},{value:"<code>lvmThinPools</code> configuration",id:"lvmthinpools-configuration",level:4},{value:"<code>zfsPools</code> configuration",id:"zfspools-configuration",level:4},{value:"Using <code>automaticStorageType</code> (DEPRECATED)",id:"using-automaticstoragetype-deprecated",level:2}],u={toc:s};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"configuring-storage"},"Configuring Storage"),(0,a.kt)("p",null,"The piraeus operator can automate some basic storage set up for LINSTOR."),(0,a.kt)("h2",{id:"configuring-storage-pool-creation"},"Configuring storage pool creation"),(0,a.kt)("p",null,"The piraeus operator can be used to create LINSTOR storage pools. Creation is under control of the\nLinstorSatelliteSet resource:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ kubectl get LinstorSatelliteSet.piraeus.linbit.com piraeus-op-ns -o yaml\nkind: LinstorSatelliteSet\nmetadata:\n..\nspec:\n  ..\n  storagePools:\n    lvmPools:\n    - name: lvm-thick\n      volumeGroup: drbdpool\n    lvmThinPools:\n    - name: lvm-thin\n      thinVolume: thinpool\n      volumeGroup: drbdpool\n    zfsPools:\n    - name: my-linstor-zpool\n      zPool: for-linstor\n      thin: true\n")),(0,a.kt)("h3",{id:"at-install-time"},"At install time"),(0,a.kt)("p",null,"At install time, by setting the value of ",(0,a.kt)("inlineCode",{parentName:"p"},"operator.satelliteSet.storagePools")," when running helm install."),(0,a.kt)("p",null,"First create a file with the storage configuration like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"operator:\n  satelliteSet:\n    storagePools:\n      lvmPools:\n      - name: lvm-thick\n        volumeGroup: drbdpool\n    ..\n")),(0,a.kt)("p",null,"This file can be passed to the helm installation like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"helm install -f <file> charts/piraeus-op\n")),(0,a.kt)("h3",{id:"after-install"},"After install"),(0,a.kt)("p",null,"On a cluster with the operator already configured (i.e. after ",(0,a.kt)("inlineCode",{parentName:"p"},"helm install"),"),\nyou can edit the LinstorSatelliteSet configuration like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ kubectl edit LinstorSatelliteSet.piraeus.linbit.com <satellitesetname>\n")),(0,a.kt)("p",null,"The storage pool configuration can be updated like in the example above."),(0,a.kt)("h2",{id:"preparing-physical-devices"},"Preparing physical devices"),(0,a.kt)("p",null,"By default, LINSTOR expects the referenced VolumeGroups, ThinPools and so on to be present. You can use the\n",(0,a.kt)("inlineCode",{parentName:"p"},"devicePaths: []")," option to let LINSTOR automatically prepare devices for the pool. Eligible for automatic configuration\nare block devices that:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Are a root device (no partition)"),(0,a.kt)("li",{parentName:"ul"},"do not contain partition information"),(0,a.kt)("li",{parentName:"ul"},"have more than 1 GiB")),(0,a.kt)("p",null,"Note: You need to use the actual device name, symlinks are not supported, i.e. use ",(0,a.kt)("inlineCode",{parentName:"p"},"/dev/nvme0n1")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"/dev/disk/by-id/nvme-eui.001b448b465c62be"),"."),(0,a.kt)("p",null,"To enable automatic configuration of devices, set the ",(0,a.kt)("inlineCode",{parentName:"p"},"devicePaths")," key on ",(0,a.kt)("inlineCode",{parentName:"p"},"storagePools")," entries:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"  storagePools:\n    lvmPools:\n    - name: lvm-thick\n      volumeGroup: drbdpool\n      devicePaths:\n      - /dev/vdb\n    lvmThinPools:\n    - name: lvm-thin\n      thinVolume: thinpool\n      volumeGroup: linstor_thinpool\n      devicePaths:\n      - /dev/vdc\n      - /dev/vdd\n")),(0,a.kt)("p",null,"Currently, this method supports creation of LVM and LVMTHIN storage pools."),(0,a.kt)("h4",{id:"lvmpools-configuration"},(0,a.kt)("inlineCode",{parentName:"h4"},"lvmPools")," configuration"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name")," name of the LINSTOR storage pool. Required"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"volumeGroup")," name of the VG to create. Required"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"devicePaths")," devices to configure for this pool. Must be empty and >= 1GiB to be recognized. Optional"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"raidLevel")," LVM raid level. Optional"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"vdo")," Enable ",(0,a.kt)("a",{parentName:"li",href:"https://www.redhat.com/en/blog/look-vdo-new-linux-compression-layer"},"VDO")," (requires VDO tools in the satellite). Optional"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"vdoLogicalSizeKib")," Size of the created VG (expected to be bigger than the backing devices by using VDO). Optional"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"vdoSlabSizeKib")," Slab size for VDO. Optional")),(0,a.kt)("p",null,"Note that a LVM configuration for Piraeus will result in volume snapshot creation being disabled. If you need volume snapshots, use LVM thin or ZFS."),(0,a.kt)("h4",{id:"lvmthinpools-configuration"},(0,a.kt)("inlineCode",{parentName:"h4"},"lvmThinPools")," configuration"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name")," name of the LINSTOR storage pool. Required"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"volumeGroup")," VG to use for the thin pool. If you want to use ",(0,a.kt)("inlineCode",{parentName:"li"},"devicePaths"),", you must set this to ",(0,a.kt)("inlineCode",{parentName:"li"},'""'),".\nThis is required because LINSTOR does not allow configuration of the VG name when preparing devices."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"thinVolume")," name of the thinpool. Required"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"devicePaths")," devices to configure for this pool. Must be empty and >= 1GiB to be recognized. Optional"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"raidLevel")," LVM raid level. Optional")),(0,a.kt)("p",null,'NOTE: The volume group created by LINSTOR for LVMTHIN pools will always follow the scheme "linstor_$THINPOOL".'),(0,a.kt)("h4",{id:"zfspools-configuration"},(0,a.kt)("inlineCode",{parentName:"h4"},"zfsPools")," configuration"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name")," name of the LINSTOR storage pool. Required"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"zPool")," name of the zpool to use. Must already be present on all machines. Required"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"thin")," ",(0,a.kt)("inlineCode",{parentName:"li"},"true")," to use thin provisioning, ",(0,a.kt)("inlineCode",{parentName:"li"},"false")," otherwise. Required")),(0,a.kt)("h2",{id:"using-automaticstoragetype-deprecated"},"Using ",(0,a.kt)("inlineCode",{parentName:"h2"},"automaticStorageType")," (DEPRECATED)"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"ALL")," eligible devices will be prepared according to the value of ",(0,a.kt)("inlineCode",{parentName:"p"},"operator.satelliteSet.automaticStorageType"),", unless\nthey are already prepared using the ",(0,a.kt)("inlineCode",{parentName:"p"},"storagePools")," section. Devices are added to a storage pool based on the device\nname (i.e. all ",(0,a.kt)("inlineCode",{parentName:"p"},"/dev/nvme1")," devices will be part of the pool ",(0,a.kt)("inlineCode",{parentName:"p"},"autopool-nvme1"),")"),(0,a.kt)("p",null,"The possible values for ",(0,a.kt)("inlineCode",{parentName:"p"},"operator.satelliteSet.automaticStorageType"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"None")," no automatic set up (default)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"LVM")," create a LVM (thick) storage pool"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"LVMTHIN")," create a LVM thin storage pool"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ZFS")," create a ZFS based storage pool (",(0,a.kt)("strong",{parentName:"li"},"UNTESTED"),")")))}d.isMDXComponent=!0}}]);